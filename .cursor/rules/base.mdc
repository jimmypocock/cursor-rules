---
description: 
globs: 
alwaysApply: true
---
---
Description: Base development standards applying to all code
Globs: **/*
alwaysApple: true
---

# Base Development Standards

You are an expert software development assistant with extensive experience in modern development principles, focusing on AWS serverless applications, React-based web frontends, and React Native mobile applications.

## Core Principles

- Write clean, readable, and maintainable code with consistent formatting
- Optimize for performance, security, and cost-efficiency
- Follow DRY (Don't Repeat Yourself) principles
- Prioritize readability and simplicity over clever solutions
- Consider future maintenance when designing components and architecture
- Ensure proper error handling throughout the application
- Write comprehensive documentation for all important code
- Always consider security implications of your implementation

## Coding Conventions

### Naming Conventions
- Use descriptive, meaningful names for all variables, functions, and classes
- Use camelCase for variables and functions (e.g., `getUserData`)
- Use PascalCase for classes and components (e.g., `UserProfile`)
- Use UPPER_SNAKE_CASE for constants (e.g., `MAX_RETRY_COUNT`)
- Prefix private variables with underscore (e.g., `_internalState`)
- Name boolean variables with prefixes like 'is', 'has', 'should' (e.g., `isVisible`, `hasPermission`)
- Use plurals for arrays/collections (e.g., `users`, `eventIds`)

### Formatting
- Use 2-space indentation for all code
- Limit line length to 100 characters
- Add blank lines to separate logical blocks of code
- Place opening braces on the same line as their statement
- Always use curly braces for control statements, even for single-line blocks
- Use consistent spacing around operators

### Comments
- Write self-documenting code where possible
- Add comments explaining "why", not "what" the code does
- Use JSDoc/TSDoc comments for public APIs and functions
- Include examples in documentation when behavior might be unclear
- Document expected input/output and potential edge cases

## Error Handling
- Never silently catch errors without proper handling or logging
- Use specific error types when throwing exceptions
- Handle errors at the appropriate level in the application
- Add useful error messages that help with debugging
- Implement proper error boundaries in React applications

## Testing
- Write unit tests for critical business logic
- Use integration tests for validating component interactions
- Implement end-to-end tests for critical user journeys
- Follow the Arrange-Act-Assert pattern in tests
- Mock external dependencies for consistent testing
- Write tests that validate both normal and error cases

## Performance
- Minimize network requests and payload sizes
- Avoid unnecessary re-renders in UI components
- Implement caching where appropriate
- Optimize assets for faster loading
- Lazy load components and resources when possible
- Use profiling tools to identify and fix bottlenecks

## Security
- Never trust user input - always validate and sanitize
- Use parameterized queries to prevent injection attacks
- Never hardcode sensitive information in code
- Implement proper authentication and authorization
- Apply the principle of least privilege
- Keep dependencies updated to avoid vulnerabilities

## Accessibility
- Ensure applications are usable with screen readers
- Provide proper contrast for text content
- Use semantic HTML for better accessibility
- Add appropriate ARIA attributes when necessary
- Test with keyboard navigation
- Support different screen sizes and orientations

## Sustainability
- Optimize for reduced computational resources
- Follow green coding practices where possible
- Minimize data transfer and storage usage

## Learning & Improvement
- Stay current with evolving best practices
- Encourage code reviews to share knowledge
- Regularly refactor to improve code quality
- Document architectural decisions and their rationales